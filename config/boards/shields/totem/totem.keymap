#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keys_de.h"

#define BASE 0
#define SYM  1
#define NUM  2
#define FUN  3
#define NAV  4
#define OTHER 5

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <170>;
};

/ {
    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label= "BASE";
            bindings = <
                &kp DE_Q       &kp DE_W       &kp DE_E       &kp DE_R       &kp DE_T        &kp DE_Z       &kp DE_U       &kp DE_I       &kp DE_O       &kp DE_P
                &mt LGUI DE_A  &mt LALT DE_S  &mt LCTRL DE_D &mt LSHFT DE_F &kp DE_G        &kp DE_H       &mt LSHFT DE_J &mt LCTRL DE_K &mt LALT DE_L  &mt LGUI DE_HASH
    &to OTHER   &kp DE_Y       &kp DE_X       &kp DE_C       &kp DE_V       &kp DE_B        &kp DE_N       &kp DE_M       &kp DE_COMMA   &kp DE_DOT     &kp DE_MINUS     &to BASE
                                              &kp ESC        &lt NUM DEL    &lt FUN BSPC    &lt NAV SPC    &lt SYM TAB    &kp RET
                        >;
        };

        sym_layer {
            label= "SYM";
            bindings = <
                &kp DE_AT   &kp DE_LPAR &kp DE_RPAR  &kp DE_UDIA  &kp DE_SS       &none    &none     &none      &none    &none
                &kp DE_BSLS &kp DE_LCBR &kp DE_RCBR  &kp DE_ADIA  &kp DE_ODIA     &none    &kp LSHFT &kp LCTRL  &kp LALT &kp LGUI
    &to FUN     &kp DE_EURO &kp DE_LBRC &kp DE_RBRC  &kp DE_ASTRK &kp DE_GRV      &none    &none     &none      &none    &none    &trans
                                        &trans       &trans       &trans          &trans   &trans    &trans
            >;
        };

        num_layer {
            label= "NUM";
            bindings = <
                &none     &none         &kp LC(PG_UP) &kp LC(PG_DN) &none        &kp DE_TILD  &kp DE_N7 &kp DE_N8 &kp DE_N9  &none
                &kp LGUI  &kp LALT      &kp LCTRL     &kp LSHFT     &none        &kp DE_PIPE  &kp DE_N4 &kp DE_N5 &kp DE_N6  &kp DE_LT
    &to NAV     &none     &kp LC(LS(X)) &kp LC(LS(C)) &kp LC(LS(V)) &none        &kp DE_QMARK &kp DE_N1 &kp DE_N2 &kp DE_N3  &kp DE_PLUS  &trans
                                        &trans        &trans        &trans       &trans       &kp DE_N0 &trans
            >;
        };

        fun_layer {
            label= "FUN";
            bindings = <
                &sk LGUI  &sk LALT     &sk LCTRL    &sk LSHFT    &none        &none    &kp F7  &kp F8  &kp F9  &kp F12
                &kp LGUI  &kp LALT     &kp LCTRL    &kp LSHFT    &none        &none    &kp F4  &kp F5  &kp F6  &kp F11
    &to BASE    &none     &kp LC(DE_X) &kp LC(DE_C) &kp LC(DE_V) &none        &none    &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                       &trans       &trans       &trans       &trans   &trans  &trans
            >;
        };

        nav_layer {
            label= "NAV";
            bindings = <
                &none     &kp PG_UP &kp HOME   &kp UP   &kp END          &kp C_VOL_UP  &kp C_PREV  &kp C_PP   &kp C_NEXT  &none
                &kp CLCK  &kp PG_DN &kp LEFT   &kp DOWN &kp RIGHT        &kp C_MUTE    &kp LSHFT   &kp LCTRL  &kp LALT &kp LGUI
    &to SYM     &kp INS   &none     &none      &none    &none            &kp C_VOL_DN  &none       &none      &none    &none    &trans
                                    &trans     &trans   &trans           &trans        &trans      &trans
            >;
        };

        other_layer {
            label= "OTHER";
            bindings = <
                    &none    &none     &none      &none    &none       &none    &none     &bt BT_PRV  &bt BT_NXT &bt BT_CLR
                    &none    &none     &none      &none    &none       &none    &none     &none       &none      &out OUT_TOG
    &to NUM         &none    &none     &none      &none    &none       &none    &none     &none       &none      &none          &trans
                                       &trans     &trans   &trans      &trans   &trans    &trans
            >;
        };
    };
};
